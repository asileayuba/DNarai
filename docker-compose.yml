services:
  # Mailpit (dev only)
  mailpit:
    image: axllent/mailpit:latest
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    restart: unless-stopped
    volumes:
      - mailpit_data:/data
    profiles: ["dev"]

  # Django app (prod)
  web-prod:
    build: .
    command: >
      sh -c "
        if [ \"$DJANGO_ENV\" = \"development\" ]; then
          python manage.py runserver 0.0.0.0:8000;
        else
          gunicorn DNarai.wsgi:application --bind 0.0.0.0:8000;
        fi
      "
    environment:
      - DJANGO_ENV=${DJANGO_ENV:-production}
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    profiles: ["prod"]

  # Django app (dev)
  web-dev:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    environment:
      - DJANGO_ENV=development
    volumes:
      - .:/app
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    profiles: ["dev"]

  # Celery worker (available in prod & dev)
  celery:
    build: .
    command: celery -A DNarai worker -l info
    user: "1000:1000"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      # checks if worker answers; may return non-zero if no workers discovered briefly
      test: ["CMD-SHELL", "celery -A DNarai status --timeout=5 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    profiles: ["prod", "dev"]

  # Celery beat (available in prod & dev)
  celery-beat:
    build: .
    command: celery -A DNarai beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    user: "1000:1000"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'celery.*beat' >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    profiles: ["prod", "dev"]

  # Flower (dev only)
  flower:
    build: .
    command: celery -A DNarai flower --port=5555
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      celery:
        condition: service_healthy
    ports:
      - "5555:5555"
    restart: unless-stopped
    profiles: ["dev"]

  # PostgreSQL (shared for prod & dev)
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles: ["prod", "dev"]
    ports:
      - "5432:5432"

  # Redis (shared for prod & dev)
  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles: ["prod", "dev"]
    ports:
      - "6379:6379"

  # Nginx (prod only)
  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - nginx_cache:/var/cache/nginx
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["prod"]

  # Caddy (dev only)
  caddy:
    image: caddy:2
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      web-dev:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["dev"]

volumes:
  postgres_data:
  static_volume:
  media_volume:
  redis_data:
  nginx_cache:
  caddy_data:
  caddy_config:
  mailpit_data:
